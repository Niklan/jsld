<?php

/**
 * @file
 *   Main file for hooks.
 */

use Psy\Util\Json;

/**
 * Implements hook_entity_view().
 */
function jsld_entity_view(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {
  if ($entity->getEntityTypeId()) {
    $entity_type = $entity->getEntityTypeId();
    $plugin_service = \Drupal::service('plugin.manager.jsld.entity');
    foreach ($plugin_service->getDefinitions() as $plugin_id => $plugin) {
      if ($plugin['entity_type'] == $entity_type && jsld_entity_limit($entity->bundle(), $view_mode, $plugin['entity_limit'])) {
        $instance = $plugin_service->createInstance($plugin_id, [
          'entity' => $entity,
          'entity_type' => $entity_type,
          'bundle' => $entity->bundle(),
          'view_mode' => $view_mode,
        ]);

        if ($instance->isEnabled()) {
          $jsld_global = \Drupal::service('jsld.global');
          $jsld_global->add($instance->build());
        }
      }
    }
  }
}

/**
 * Check limitation for bundle and view mode of entity.
 */
function jsld_entity_limit($bundle, $view_mode, $limits = []) {
  $valid = FALSE;
  foreach ($limits as $limit) {
    // Every limit must contain separator.
    if (strpos($limit, '|') === FALSE) {
      continue;
    }

    list($limit_bundle, $limit_view_mode) = explode('|', $limit);
    if (($bundle == $limit_bundle || $limit_bundle == '*') && ($view_mode == $limit_view_mode || $limit_view_mode == '*')) {
      $valid = TRUE;
      break;
    }
  }

  return $valid;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function jsld_preprocess_html(&$variables) {
  $jsld_global = \Drupal::service('jsld.global');
  // Path plugins.
  $plugin_service = \Drupal::service('plugin.manager.jsld.path');
  $path_matcher = \Drupal::service('path.matcher');
  $request = \Drupal::request();
  $current_path = \Drupal::service('path.current')->getPath();
  foreach ($plugin_service->getDefinitions() as $plugin_id => $plugin) {
    $pattern = implode(PHP_EOL, $plugin['match_path']);
    $is_match_path = $path_matcher->matchPath($current_path, $pattern);
    $is_need_jsld = ($is_match_path xor $plugin['match_type']);
    if ($is_need_jsld) {
      $instance = $plugin_service->createInstance($plugin_id, [
        'request' => $request,
      ]);

      if ($instance->isEnabled()) {
        $jsld_global->add($instance->build());
      }
    }
  }
  $jsld = $jsld_global->get();
  if (!empty($jsld)) {
    $variables['page_bottom'][] = [
      '#type' => 'html_tag',
      '#tag' => 'script',
      '#attributes' => [
        'type' => 'application/ld+json',
      ],
      '#value' => Json::encode($jsld),
    ];
  }
}
